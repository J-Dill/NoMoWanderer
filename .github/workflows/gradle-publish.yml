name: Build & Release

on: push

jobs:

  version-check:
    runs-on: ubuntu-latest
    outputs:
      new-tag: v${{ steps.load-props.outputs.value }}
      continue: ${{ steps.continue-build.outputs.continue }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Load Current Mod Version
        uses: madhead/read-java-properties@1.2.0
        id: load-props
        with:
          file: ./gradle.properties
          property: mod_version

      - name: Retrieve Latest Version
        id: get-version
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          echo "::set-output name=latest-tag::${last_tag:1}"

      # Run the rest of the workflow only if a new version has been detected.
      - name: Continue Build?
        id: continue-build
        if: steps.load-props.outputs.value != steps.get-version.outputs.latest-tag
        run: |
          echo "::set-output name=continue::true"

      - name: Tag Commit w/ Version
        uses: rickstaa/action-create-tag@v1.3.7
        if: steps.continue-build.outputs.continue
        with:
          tag: v${{ steps.load-props.outputs.value }}
          github_token: ${{ secrets.TOKEN }}

  build:
    runs-on: ubuntu-latest
    needs: version-check
    if: needs.version-check.outputs.continue

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Build with Gradle
        id: build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Upload JARs
        uses: actions/upload-artifact@v3
        with:
          name: jars-upload
          path: ./build/libs/*.jar

  release-github:
    runs-on: ubuntu-latest
    needs: [build, version-check]
    if: needs.version-check.outputs.continue

    outputs:
      changelog: ${{ steps.get-release-changelog.outputs.body }}

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: jars-upload
          path: ./build/libs/

      - name: Create GitHub Release
        id: create-release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.TOKEN }}
          automatic_release_tag: ${{ needs.version-check.outputs.new-tag }}
          prerelease: false
          files: ./build/libs/*.jar
          
      - name: Get Release Changelog
        id: get-release-changelog
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag: ${{ steps.create-release.outputs.automatic_releases_tag }}

  release-curseforge:
    runs-on: ubuntu-latest
    needs: [version-check, build, release-github]
    if: needs.version-check.outputs.continue

    steps:
      - uses: actions/checkout@v3

      - name: Load Gradle Properties
        uses: madhead/read-java-properties@1.2.0
        id: load-props
        with:
          file: ./gradle.properties
          all: true

      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: jars-upload
          path: ./build/libs/

      - name: Upload to CurseForge
        uses: itsmeow/curseforge-upload@v3
        with:
          file_path: "./build/libs/${{ steps.load-props.outputs.mod_id }}-${{ steps.load-props.outputs.version_mc }}_${{ steps.load-props.outputs.mod_version }}.jar"
          game_endpoint: minecraft
          release_type: release
          game_versions: "${{ steps.load-props.outputs.curse_versions_forge }}"
          project_id: "${{ steps.load-props.outputs.curse_id }}"
          changelog: ${{ needs.release-github.outputs.changelog }}
          changelog_type: "markdown"
          token: "${{ secrets.CURSEFORGE_API_KEY }}"
